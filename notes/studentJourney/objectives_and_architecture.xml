<response>
    <!-- 
      The following XML files describe:
      1) instructions.xml: Code style and structure guidelines for building
         this Ruby on Rails, Hotwire, and Tailwind CSS application.
      2) objectives.xml: High-level objectives for the scholarship platform.
      3) architecture.xml: The app’s layered structure, data flow, and deployment.
      4) user-journey.xml: Stages in the user journey from sign-up to submission. 
    -->

    <instructionsFile name="instructions.xml">
        <instructions>
            <section title="Code Style and Structure">
                <point>
                    Write concise, idiomatic Ruby code with accurate examples.
                </point>
                <point>
                    Follow Rails conventions and best practices.
                </point>
                <point>
                    Use object-oriented and functional programming patterns as appropriate.
                </point>
                <point>
                    Prefer iteration and modularization over code duplication.
                </point>
                <point>
                    Use descriptive variable and method names (e.g., user_signed_in?, calculate_total).
                </point>
                <point>
                    Structure files according to Rails MVC, concerns, helpers, etc.
                </point>
            </section>
            <section title="Naming Conventions">
                <point>
                    Use snake_case for file names, method names, and variables.
                </point>
                <point>
                    Use CamelCase for class and module names.
                </point>
                <point>
                    Follow Rails naming conventions for models, controllers, and views.
                </point>
            </section>
            <section title="Ruby and Rails Usage">
                <point>
                    Use Ruby 3.1.2 features where appropriate (pattern matching, endless methods).
                </point>
                <point>
                    Leverage Rails 7.2.2 built-in helpers and methods.
                </point>
                <point>
                    Use ActiveRecord effectively for database operations.
                </point>
            </section>
            <section title="Syntax and Formatting">
                <point>
                    Follow the Ruby Style Guide (https://rubystyle.guide/).
                </point>
                <point>
                    Use Ruby's expressive syntax (e.g., unless, ||=, &.).
                </point>
                <point>
                    Prefer single quotes for strings unless interpolation is needed.
                </point>
            </section>
            <section title="Error Handling and Validation">
                <point>
                    Use exceptions for exceptional cases, not for control flow.
                </point>
                <point>
                    Implement proper error logging and user-friendly messages.
                </point>
                <point>
                    Use ActiveModel validations in models.
                </point>
                <point>
                    Handle errors gracefully in controllers and display flash messages.
                </point>
            </section>
            <section title="UI and Styling">
                <point>
                    Use Hotwire (Turbo and Stimulus) for dynamic, SPA-like interactions.
                </point>
                <point>
                    Implement responsive design with Tailwind CSS.
                </point>
                <point>
                    Use Rails view helpers and partials to keep views DRY.
                </point>
            </section>
            <section title="Performance Optimization">
                <point>
                    Use database indexing effectively.
                </point>
                <point>
                    Implement caching strategies (fragment caching, Russian Doll caching).
                </point>
                <point>
                    Use eager loading to avoid N+1 queries (e.g., includes).
                </point>
                <point>
                    Optimize queries using joins, select, etc.
                </point>
            </section>
            <section title="Key Conventions">
                <point>
                    Follow RESTful routing conventions.
                </point>
                <point>
                    Use concerns for shared behavior across models or controllers.
                </point>
                <point>
                    Implement service objects for complex business logic.
                </point>
                <point>
                    Use background jobs (Sidekiq) for time-consuming tasks.
                </point>
            </section>
            <section title="Testing">
                <point>
                    Write comprehensive tests using RSpec or Minitest.
                </point>
                <point>
                    Follow TDD/BDD practices where possible.
                </point>
                <point>
                    Use factories (FactoryBot) for test data generation.
                </point>
            </section>
            <section title="Security">
                <point>
                    Implement proper authentication and authorization (Devise, Pundit).
                </point>
                <point>
                    Use strong parameters in controllers.
                </point>
                <point>
                    Protect against XSS, CSRF, and SQL injection vulnerabilities.
                </point>
            </section>
        </instructions>
    </instructionsFile>

    <objectivesFile name="objectives.xml">
        <objectives>
            <objective>
                Build a subscription-based platform (e.g., $20/month) that helps
                students find, organize, and apply for scholarships and fellowships.
            </objective>
            <objective>
                Foster a sense of momentum through personalized tracking,
                success stories, and iterative application support.
            </objective>
            <objective>
                Provide an LLM-powered essay feedback system (GPT-4-mini)
                to assist users with personal statements and application materials.
            </objective>
            <objective>
                Create an engaging platform that showcases real stories of students
                winning scholarships and fellowships, inspiring new applicants.
            </objective>
            <objective>
                Demonstrate ROI via weekly or monthly crawls/emails of new scholarship
                opportunities, a custom plan builder, and fellowship “chatbots.”
            </objective>
        </objectives>
    </objectivesFile>

    <architectureFile name="architecture.xml">
        <architecture>
            <layers>
                <layer>
                    <name>Frontend (Rails + Hotwire + Tailwind)</name>
                    <description>
                        Provides UI for sign-up, subscription, scholarship search,
                        essay drafting, and real-time interactions via Turbo Streams.
                    </description>
                </layer>
                <layer>
                    <name>Backend (Rails 7.2.2 & Ruby 3.1.2)</name>
                    <description>
                        Hosts the application logic, RESTful routes, user management,
                        subscription tracking, scholarship crawling, and AI integration.
                    </description>
                </layer>
                <layer>
                    <name>AI Integration (GPT-4-mini)</name>
                    <description>
                        Processes essay drafts, returns feedback, and offers
                        fellowship Q&A. Communicated via HTTP or RPC from Rails.
                    </description>
                </layer>
                <layer>
                    <name>Database (PostgreSQL)</name>
                    <description>
                        Stores users, scholarships, essay drafts, chat logs, and
                        subscription data. Includes indexing, caching, and robust
                        search capabilities.
                    </description>
                </layer>
                <layer>
                    <name>Background Jobs</name>
                    <description>
                        Sidekiq (or similar) handles periodic scholarship crawls,
                        batch email notifications, and async AI calls if necessary.
                    </description>
                </layer>
            </layers>
            <dataFlow>
                <step>1. User signs up, enters profile/interests → stored in DB</step>
                <step>2. Subscription payments processed (Stripe or other gateway)</step>
                <step>3. Scholarship crawler updates DB → weekly/daily basis</step>
                <step>4. User requests essay feedback → Rails sends draft to GPT-4-mini</step>
                <step>5. GPT-4-mini returns feedback → stored/logged → displayed to user</step>
                <step>6. Email notifications (upcoming deadlines) → scheduled with background job</step>
            </dataFlow>
            <deployment>
                <platform>
                    Heroku / AWS (container-based) recommended for scaling
                </platform>
                <notes>
                    - Ensure environment variables for AI endpoints
                    - Use SSL / HTTPS for user data protection
                    - Implement horizontal scaling (web dynos) for high traffic
                </notes>
            </deployment>
        </architecture>
    </architectureFile>

    <userJourneyFile name="user-journey.xml">
        <userJourney>
            <stage name="LandingPage">
                <description>
                    Users see calls-to-action, success stories, subscription prompt.
                    Inspired by the idea of 'momentum' in scholarship searching.
                </description>
            </stage>
            <stage name="SubscriptionSignup">
                <description>
                    Users create accounts, choose a $20/month plan for advanced
                    features (weekly scholarship crawl, custom plan, etc.).
                </description>
            </stage>
            <stage name="ProfileSetup">
                <description>
                    Users enter personal data (interests, major, year), forming
                    the basis for personalized scholarship recommendations.
                </description>
            </stage>
            <stage name="Dashboard">
                <description>
                    Displays upcoming deadlines, recent crawled scholarships,
                    momentum stats ($ awarded, apps in progress).
                </description>
            </stage>
            <stage name="ScholarshipSearch">
                <description>
                    User searches or browses curated scholarships/fellowships.
                    Weekly crawls email top matches to subscribers.
                </description>
            </stage>
            <stage name="FellowshipChat">
                <description>
                    Users “chat” with specialized GPT modules about specific
                    fellowships (Truman, Rhodes, Yenching), returning deadlines,
                    requirements, plus a suggested plan with revision cycles.
                </description>
            </stage>
            <stage name="EssayDraftingAndFeedback">
                <description>
                    Users iterate on essay drafts with GPT-4-mini feedback. They
                    schedule professor or mentor reviews, track multiple drafts,
                    and refine final submissions.
                </description>
            </stage>
            <stage name="ApplicationSubmission">
                <description>
                    Once deadlines approach, users finalize applications, submit,
                    and see a celebratory “momentum” update. Encourages next steps.
                </description>
            </stage>
            <stage name="OngoingSupport">
                <description>
                    Users remain subscribed for continuous scholarship updates,
                    new fellowship leads, and extended essay revision services.
                </description>
            </stage>
        </userJourney>
    </userJourneyFile>
</response>
