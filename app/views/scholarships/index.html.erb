<!-- Filter Bar -->
<div class="filter-bar">
  <div class="filter-header">
    <div class="filter-groups">
      <% if current_user %>
        <button class="filter-btn <%= 'active' if params[:filter] == 'bookmarked' %>" 
                data-filter="bookmarked"
                onclick="window.location.href='<%= scholarships_path(filter: 'bookmarked') %>'">
          ‚≠êÔ∏è Bookmarked (<%= @bookmarked_count %>)
        </button>
      <% end %>
      <% Scholarship.tag_counts.each do |tag, count| %>
        <button class="filter-btn" data-filter="<%= tag %>">
          <%= get_emoji(tag) %> <%= tag.titleize %> (<%= count %>)
        </button>
      <% end %>
      <button class="close-filters-btn" style="display: none;">Close filters</button>
    </div>
    <button class="filter-toggle-btn" onclick="toggleFilterBar()">
      <span class="toggle-icon">üöÄ</span>
    </button>
  </div>
</div>

<!-- Scholarship Grid -->
<div class="scholarship-grid">
  <% @scholarships.each do |scholarship| %>
    <div class="scholarship-card" 
         data-tags="<%= scholarship.tags.join(' ') %>"
         data-bookmarked="<%= scholarship.bookmarks.exists?(user_id: current_user&.id) %>">
      <%= link_to scholarship_path(scholarship), class: "card-link" do %>
        <div class="card-header">
          <h3><%= scholarship.name %></h3>
          <div class="due-date">Due: <%= scholarship.due_date %></div>
        </div>
        
        <div class="card-body">
          <p><%= truncate(scholarship.description, length: 150) %></p>
        </div>

        <div class="card-footer">
          <div class="tags">
            <% scholarship.tags.each do |tag| %>
              <span class="tag"><%= get_emoji(tag) %> <%= tag.titleize %></span>
            <% end %>
          </div>
          <div class="action-buttons">
            <button class="bookmark-btn <%= current_user && scholarship.bookmarks.exists?(user_id: current_user.id) ? 'active' : '' %>" 
                    data-scholarship-id="<%= scholarship.id %>"
                    onclick="event.preventDefault(); toggleBookmark(this)">
              ‚≠êÔ∏è <%= current_user && scholarship.bookmarks.exists?(user_id: current_user.id) ? 'Bookmarked' : 'Bookmark' %>
            </button>
            <button class="share-btn" 
                    onclick="event.preventDefault(); shareScholarship('<%= scholarship_url(scholarship) %>')"
                    data-scholarship-id="<%= scholarship.id %>">
              üîó Share
            </button>
          </div>
        </div>
      <% end %>
    </div>
  <% end %>
</div>

<%= render 'shared/premium_features_modal' %>

<style>
  .card-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .scholarship-card {
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .scholarship-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .share-btn {
    padding: 0.5rem 1rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .share-btn:hover {
    background: #5a6268;
  }

  .filter-btn {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    margin: 0.25rem;
    border: 1px solid #e2e8f0;
    border-radius: 9999px;
    background-color: white;
    cursor: pointer;
    transition: all 0.2s;
  }

  .filter-btn.active {
    background-color: #4a5568;
    color: white;
  }

  .filter-btn:hover {
    background-color: #f7fafc;
  }

  .filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .filter-groups {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    transition: all 0.3s ease;
  }

  .filter-groups.hidden {
    display: none;
  }

  .filter-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border: 1px solid #e2e8f0;
    border-radius: 9999px;
    background-color: white;
    cursor: pointer;
    transition: all 0.2s;
    margin-left: 1rem;
  }

  .filter-toggle-btn:hover {
    background-color: #f7fafc;
    transform: scale(1.05);
  }

  .filter-toggle-btn.active {
    background-color: #4a5568;
    color: white;
  }

  .toggle-icon {
    font-size: 1.2rem;
  }

  .error-toast {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #ef4444;
    color: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    z-index: 1000;
    animation: slideUp 0.3s ease-out;
  }

  @keyframes slideUp {
    from {
      transform: translate(-50%, 100%);
      opacity: 0;
    }
    to {
      transform: translate(-50%, 0);
      opacity: 1;
    }
  }
</style>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const closeFiltersBtn = document.querySelector('.close-filters-btn');
    const scholarshipCards = document.querySelectorAll('.scholarship-card');
    const modal = document.getElementById('premium-features-modal');
    let activeFilters = new Set();
    
    // Filter button click handler
    filterBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const filter = this.dataset.filter;
        
        if (this.classList.contains('active')) {
          // Remove filter
          this.classList.remove('active');
          activeFilters.delete(filter);
          window.history.pushState({}, '', '<%= scholarships_path %>');
        } else {
          // Add filter
          this.classList.add('active');
          activeFilters.add(filter);
          window.history.pushState({}, '', '<%= scholarships_path %>?filter=' + filter);
        }
        
        // Show/hide close filters button
        closeFiltersBtn.style.display = activeFilters.size > 0 ? 'block' : 'none';
        
        // Apply filters
        scholarshipCards.forEach(card => {
          if (activeFilters.size === 0) {
            card.style.display = 'block';
            return;
          }
          
          let shouldShow = false;
          
          // Check bookmarked filter
          if (activeFilters.has('bookmarked')) {
            shouldShow = card.dataset.bookmarked === 'true';
          }
          
          // Check tag filters
          const cardTags = card.dataset.tags.split(' ');
          activeFilters.forEach(filter => {
            if (filter !== 'bookmarked' && cardTags.includes(filter)) {
              shouldShow = true;
            }
          });
          
          card.style.display = shouldShow ? 'block' : 'none';
        });
      });
    });
    
    // Close filters button click handler
    closeFiltersBtn.addEventListener('click', function() {
      activeFilters.clear();
      filterBtns.forEach(btn => btn.classList.remove('active'));
      scholarshipCards.forEach(card => card.style.display = 'block');
      this.style.display = 'none';
    });
    
    // Bookmark button click handler
    function toggleBookmark(button) {
      // Check if user is authenticated
      if (!<%= premium_user? %>) {
        const modal = document.getElementById('premium-features-modal');
        if (modal) {
          modal.style.display = 'block';
        }
        return;
      }
      
      const scholarshipId = button.dataset.scholarshipId;
      const isBookmarked = button.classList.contains('active');
      
      const method = isBookmarked ? 'DELETE' : 'POST';
      const url = isBookmarked ? `/bookmarks/${scholarshipId}` : '/bookmarks';
      
      // Show loading state
      const originalText = button.textContent;
      button.textContent = '‚è≥ Loading...';
      button.disabled = true;
      
      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ scholarship_id: scholarshipId }),
        credentials: 'same-origin'
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json().catch(error => {
          // If JSON parsing fails, return a default success response
          return { status: 'success' };
        });
      })
      .then(data => {
        if (data.status === 'success') {
          button.classList.toggle('active');
          button.textContent = isBookmarked ? '‚≠êÔ∏è Bookmark' : '‚≠êÔ∏è Bookmarked';
          
          // Update bookmark count in filter pill
          const bookmarkedFilter = document.querySelector('.filter-btn[data-filter="bookmarked"]');
          if (bookmarkedFilter) {
            const currentCount = parseInt(bookmarkedFilter.textContent.match(/\d+/)[0]);
            const newCount = isBookmarked ? currentCount - 1 : currentCount + 1;
            bookmarkedFilter.textContent = `‚≠êÔ∏è Bookmarked (${newCount})`;
          }
          
          // Update card's data-bookmarked attribute
          button.closest('.scholarship-card').dataset.bookmarked = (!isBookmarked).toString();
        } else {
          // Revert to original state if unsuccessful
          button.textContent = originalText;
        }
      })
      .catch(error => {
        console.error('Error:', error);
        // Revert to original state on error
        button.textContent = originalText;
        // Show error message to user
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-toast';
        errorMessage.textContent = 'Failed to update bookmark. Please try again.';
        document.body.appendChild(errorMessage);
        setTimeout(() => errorMessage.remove(), 3000);
      })
      .finally(() => {
        button.disabled = false;
      });
    }
    window.toggleBookmark = toggleBookmark;

    // Share scholarship function
    window.shareScholarship = function(url) {
      if (navigator.share) {
        navigator.share({
          title: 'Check out this scholarship!',
          url: url
        }).catch(console.error);
      } else {
        navigator.clipboard.writeText(url).then(() => {
          const shareBtn = event.target;
          const originalText = shareBtn.textContent;
          shareBtn.textContent = '‚úì Copied!';
          setTimeout(() => {
            shareBtn.textContent = originalText;
          }, 2000);
        });
      }
    };

    // Close modal when clicking outside
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = 'none';
      }
    };

    // Filter toggle functionality
    window.toggleFilterBar = function() {
      const filterGroups = document.querySelector('.filter-groups');
      const toggleBtn = document.querySelector('.filter-toggle-btn');
      
      filterGroups.classList.toggle('hidden');
      toggleBtn.classList.toggle('active');
      
      // Update toggle icon
      const toggleIcon = toggleBtn.querySelector('.toggle-icon');
      if (filterGroups.classList.contains('hidden')) {
        toggleIcon.textContent = 'üöÄ';
      } else {
        toggleIcon.textContent = '‚úï';
      }
    };
  });
<% end %> 