<!-- Filter Bar -->
<div class="filter-bar">
  <div class="filter-groups">
    <% if session[:user_id] %>
      <button class="filter-btn" data-filter="bookmarked">
        ⭐️ Bookmarked (<%= @bookmarked_count %>)
      </button>
    <% end %>
    <% Scholarship.tag_counts.each do |tag, count| %>
      <button class="filter-btn" data-filter="<%= tag %>">
        <%= get_emoji(tag) %> <%= tag.titleize %> (<%= count %>)
      </button>
    <% end %>
    <button class="close-filters-btn" style="display: none;">Close filters</button>
  </div>
</div>

<!-- Scholarship Grid -->
<div class="scholarship-grid">
  <% @scholarships.each do |scholarship| %>
    <div class="scholarship-card" 
         data-tags="<%= scholarship.tags.join(' ') %>"
         data-bookmarked="<%= scholarship.bookmarks.exists?(user_id: session[:user_id]) %>">
      <div class="card-header">
        <h3><%= scholarship.name %></h3>
        <div class="due-date">Due: <%= scholarship.due_date %></div>
      </div>
      
      <div class="card-body">
        <p><%= truncate(scholarship.description, length: 150) %></p>
      </div>

      <div class="card-footer">
        <div class="tags">
          <% scholarship.tags.each do |tag| %>
            <span class="tag"><%= get_emoji(tag) %> <%= tag.titleize %></span>
          <% end %>
        </div>
        <div class="action-buttons">
          <button class="bookmark-btn <%= session[:user_id] && scholarship.bookmarks.exists?(user_id: session[:user_id]) ? 'active' : '' %>" 
                  data-scholarship-id="<%= scholarship.id %>">
            ⭐️ <%= session[:user_id] && scholarship.bookmarks.exists?(user_id: session[:user_id]) ? 'Bookmarked' : 'Bookmark' %>
          </button>
          <a href="<%= scholarship.url %>" target="_blank" class="apply-btn">Learn More</a>
        </div>
      </div>
    </div>
  <% end %>
</div>

<%= render 'shared/premium_features_modal' %>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const closeFiltersBtn = document.querySelector('.close-filters-btn');
    const scholarshipCards = document.querySelectorAll('.scholarship-card');
    const modal = document.getElementById('premium-features-modal');
    let activeFilters = new Set();
    
    // Filter button click handler
    filterBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const filter = this.dataset.filter;
        
        if (this.classList.contains('active')) {
          // Remove filter
          this.classList.remove('active');
          activeFilters.delete(filter);
        } else {
          // Add filter
          this.classList.add('active');
          activeFilters.add(filter);
        }
        
        // Show/hide close filters button
        closeFiltersBtn.style.display = activeFilters.size > 0 ? 'block' : 'none';
        
        // Apply filters
        scholarshipCards.forEach(card => {
          if (activeFilters.size === 0) {
            card.style.display = 'block';
            return;
          }
          
          let shouldShow = false;
          
          // Check bookmarked filter
          if (activeFilters.has('bookmarked')) {
            shouldShow = card.dataset.bookmarked === 'true';
          }
          
          // Check tag filters
          const cardTags = card.dataset.tags.split(' ');
          activeFilters.forEach(filter => {
            if (filter !== 'bookmarked' && cardTags.includes(filter)) {
              shouldShow = true;
            }
          });
          
          card.style.display = shouldShow ? 'block' : 'none';
        });
      });
    });
    
    // Close filters button click handler
    closeFiltersBtn.addEventListener('click', function() {
      activeFilters.clear();
      filterBtns.forEach(btn => btn.classList.remove('active'));
      scholarshipCards.forEach(card => card.style.display = 'block');
      this.style.display = 'none';
    });
    
    // Bookmark button click handler
    const bookmarkBtns = document.querySelectorAll('.bookmark-btn');
    bookmarkBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        
        // Check if user is authenticated
        if (!<%= !!session[:user_id] %>) {
          if (modal) {
            modal.style.display = 'block';
          }
          return;
        }
        
        const scholarshipId = this.dataset.scholarshipId;
        const isBookmarked = this.classList.contains('active');
        
        const method = isBookmarked ? 'DELETE' : 'POST';
        const url = isBookmarked ? `/bookmarks/${scholarshipId}` : '/bookmarks';
        
        fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ scholarship_id: scholarshipId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            this.classList.toggle('active');
            this.textContent = isBookmarked ? '⭐️ Bookmark' : '⭐️ Bookmarked';
            
            // Update bookmark count in filter pill
            const bookmarkedFilter = document.querySelector('.filter-btn[data-filter="bookmarked"]');
            if (bookmarkedFilter) {
              const currentCount = parseInt(bookmarkedFilter.textContent.match(/\d+/)[0]);
              const newCount = isBookmarked ? currentCount - 1 : currentCount + 1;
              bookmarkedFilter.textContent = `⭐️ Bookmarked (${newCount})`;
            }
            
            // Update card's data-bookmarked attribute
            this.closest('.scholarship-card').dataset.bookmarked = (!isBookmarked).toString();
          }
        });
      });
    });

    // Close modal when clicking outside
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = 'none';
      }
    };
  });
<% end %> 